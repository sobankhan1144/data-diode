#!/usr/bin/env python3
"""
Send files through unidirectional serial device
"""

import os
import sys
import base64
import hashlib
import time
import argparse
import re
import logging
import logging.handlers
from subprocess import Popen, PIPE
import serial

DIODE_LOGGER = logging.getLogger('DIODE')
DIODE_LOGGER.setLevel(logging.INFO)
SYSLOG_FORMATTER = logging.Formatter('%(name)s %(levelname)s: %(message)s')
STDERR_FORMATTER = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
SYSLOG_HANDLER = logging.handlers.SysLogHandler(address='/dev/log')
SYSLOG_HANDLER.setFormatter(SYSLOG_FORMATTER)
STDERR_HANDLER = logging.StreamHandler(sys.stderr)
STDERR_HANDLER.setLevel(logging.DEBUG)
STDERR_HANDLER.setFormatter(STDERR_FORMATTER)
DIODE_LOGGER.addHandler(SYSLOG_HANDLER)
DIODE_LOGGER.addHandler(STDERR_HANDLER)

PARSER = argparse.ArgumentParser(description='Serial device options')
PARSER.add_argument('--speed', type=int, nargs='?', default=115200,
                    help='serial bit rate, default 115200')
PARSER.add_argument('--device', type=str, nargs='?', required=True,
                    help='serial device, i.e. /dev/cuaU0')
PARSER.add_argument('--directory', type=str, nargs='?', required=True,
                    help='directory from which to send files')
PARSER.add_argument('--bs', type=int, nargs='?', default=16384,
                    help='size of file chunks sent through the serial connection')
PARSER.add_argument('--sleep', type=float, nargs='?', default=0,
                    help='wait between each chunks, default 0')
PARSER.add_argument('--csize', type=int, nargs='?', default=4,
                    help='chunk size in MB, default 4')
ARGS = PARSER.parse_args()

def wln(line):
    """
    Write line to serial device
    """
    ser.write(line)
    ser.write(b'\n')


with serial.Serial(ARGS.device, ARGS.speed, timeout=1) as ser:
    DIODE_LOGGER.info("Scanning %s", ARGS.directory)
    wln(b'sync ...')
    time.sleep(0.1)
    wln(b'Hello world!')
    while True:
        for root, dirs, files in os.walk(ARGS.directory):
            for filename in files:
                filepath = os.path.join(root, filename)
                p = Popen(['fuser', filepath], stdout=PIPE)
                output, err = p.communicate()
                if output == filepath + ":":
                    DIODE_LOGGER.error("Skipping %s, in use.", filename)
                    continue
                filesize = os.stat(filepath).st_size
                if filesize > (ARGS.csize * 1024 * 1024):
                    DIODE_LOGGER.info("File %s too large, splitting into chunks", filename)
                    p = Popen(["/usr/bin/split", "-b", "{}m".format(ARGS.csize), filepath,
                               "{}-part_".format(filename)], cwd=root)
                    p.communicate()
                    os.remove(filepath)
                    continue
                rel_filename = os.path.relpath(filepath, ARGS.directory)
                DIODE_LOGGER.info("Sending %s", rel_filename)
                m = hashlib.md5()
                b64_filename = base64.b64encode(bytes(rel_filename, 'ascii'))
                m.update(b64_filename)
                wln(bytes(chr(1), 'ascii')) # SOH - Start Of Header
                wln(b64_filename+bytes(" " + str(filesize), 'ascii'))
                wln(bytes(chr(2), 'ascii')) # STX - Start of Text
                with open(filepath, "rb") as fo:
                    while True:
                        content = fo.read(int(ARGS.bs))
                        if not content:
                            break
                        content = base64.b64encode(content)
                        m.update(content)
                        wln(content)
                        time.sleep(ARGS.sleep)
                wln(bytes(chr(3), 'ascii')) # ETX - End of Text
                hashsum = m.hexdigest().encode("ascii", "ignore")
                wln(hashsum)
                wln(bytes(chr(4), 'ascii')) # EOT - End of Transmission
                os.remove(filepath)
                if re.match("(.*)-part_[a-z]{2}", filename):
                    basename = re.search("(.*)-part_[a-z]{2}", filename).group(1)
                    chunks_list = sorted([i for i in files if re.match(
                        basename + "-part_[a-z]{2}", i)])
                    if chunks_list[-1] == filename:
                        DIODE_LOGGER.info("Last chunk for %s transferred.", filename)
                        wln(bytes(chr(25), 'ascii')) # EM - End of Medium
                        time.sleep(2)
                        # extra time for the receiver to start assembling chunks
                DIODE_LOGGER.info("Done.")
                time.sleep(5)
        time.sleep(1)
