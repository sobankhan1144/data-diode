#!/usr/bin/env python3
"""
Send files through unidirectional serial device
"""

import os
import base64
import hashlib
import time
import argparse
from subprocess import Popen, PIPE

import serial

PARSER = argparse.ArgumentParser(description='Serial device options')
PARSER.add_argument('--speed', type=int, nargs='?', default=115200,
                    help='serial bit rate, default 115200')
PARSER.add_argument('--device', type=str, nargs='?', required=True,
                    help='serial device, i.e. /dev/cuaU0')
PARSER.add_argument('--directory', type=str, nargs='?', required=True,
                    help='directory from which to send files')
PARSER.add_argument('--bs', type=int, nargs='?', default=16384,
                    help='size of file chunks sent through the serial connection')
PARSER.add_argument('--sleep', type=float, nargs='?', default=0,
                    help='wait between each chunks, default 0')

ARGS = PARSER.parse_args()

def wln(line):
    """
    Write line to serial device
    """
    ser.write(line)
    ser.write(b'\n')


with serial.Serial(ARGS.device, ARGS.speed, timeout=1) as ser:
    print("Scanning %s" % ARGS.directory)
    wln(b'sync ...')
    time.sleep(0.1)
    wln(b'Hello world!')
    while True:
        for root, dirs, files in os.walk(ARGS.directory):
            for filename in files:
                filepath = os.path.join(root, filename)
                p = Popen(['fuser', filepath], stdout=PIPE)
                output, err = p.communicate()
                if output == filepath + ":":
                    print("ERROR: Skipping %s, in use." % filename)
                    continue
                filename = os.path.relpath(filepath, ARGS.directory)
                print("INFO: Sending %s" % filename)
                m = hashlib.md5()
                filesize = " " + str(os.stat(filepath).st_size)
                filename = base64.b64encode(bytes(filename, 'ascii'))
                m.update(filename)
                wln(bytes(chr(1), 'ascii')) # SOH - Start Of Header
                wln(filename+bytes(filesize, 'ascii'))
                wln(bytes(chr(2), 'ascii')) # STX - Start of Text
                with open(filepath, "rb") as fo:
                    while True:
                        content = fo.read(int(ARGS.bs))
                        if not content:
                            break
                        content = base64.b64encode(content)
                        m.update(content)
                        wln(content)
                        time.sleep(ARGS.sleep)
                wln(bytes(chr(3), 'ascii')) # ETX - End of Text
                hashsum = m.hexdigest().encode("ascii", "ignore")
                wln(hashsum)
                wln(bytes(chr(4), 'ascii')) # EOT - End of Transmission
                os.remove(filepath)
                print("INFO: Done.")
                time.sleep(5)
        time.sleep(1)
