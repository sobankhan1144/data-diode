#!/usr/bin/env python3
"""
Receive files through unidirectional serial device
"""
# pylint: disable=W0603


import os
import sys
import base64
import hashlib
import argparse
import time
import re
import logging
import logging.handlers
from subprocess import Popen
import serial

DIODE_LOGGER = logging.getLogger('DIODE')
DIODE_LOGGER.setLevel(logging.INFO)
SYSLOG_FORMATTER = logging.Formatter('%(name)s %(levelname)s: %(message)s')
STDERR_FORMATTER = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
SYSLOG_HANDLER = logging.handlers.SysLogHandler(address='/dev/log')
SYSLOG_HANDLER.setFormatter(SYSLOG_FORMATTER)
STDERR_HANDLER = logging.StreamHandler(sys.stderr)
STDERR_HANDLER.setLevel(logging.DEBUG)
STDERR_HANDLER.setFormatter(STDERR_FORMATTER)
DIODE_LOGGER.addHandler(SYSLOG_HANDLER)
DIODE_LOGGER.addHandler(STDERR_HANDLER)

PARSER = argparse.ArgumentParser(description='Serial device options')
PARSER.add_argument('--speed', type=int, nargs='?', default=115200,
                    help='serial bit rate, default 115200')
PARSER.add_argument('--device', type=str, nargs='?', required=True,
                    help='serial device, i.e. /dev/cuaU0')
PARSER.add_argument('--arduino', type=str, nargs='?', required=False,
                    help='serial device, i.e. /dev/cuaU1')
PARSER.add_argument('--directory', type=str, nargs='?', required=True,
                    help='directory from which to send files')

ARGS = PARSER.parse_args()

def assemble_chunks(args, filename):
    """
    Recreate original file from parts
    """
    chunks_globber = re.search("(.*-part_)[a-z]{2}", filename).group(1)
    orig_name = re.search("(.*)-part_[a-z]{2}", filename).group(1)
    DIODE_LOGGER.info("Assembling previously transmitted chunks to %s", orig_name)
    cmd = "/bin/cat {}* > {}".format(chunks_globber, orig_name)
    Popen(cmd, shell=True, executable='/bin/ksh', cwd=args.directory)


class FileTransfer:  # pylint: disable=too-few-public-methods
    """
    Class to handle data of a file transfer
    """

    def __init__(self):
        self.size = 0
        self.name = None
        self.name_b64 = None
        self.hashsum = None
        self.hashsum_received = None
        self.content = None
        self.hasher = hashlib.md5()

class DiodeHandler:  # pylint: disable=too-many-instance-attributes
    """
    Class for transferring data and keeping track of the status
    """
    def __init__(self, args, logger):
        self.args = args
        self.logger = logger
        self.total_data = 0
        self.files_total = 0
        self.files_error = 0
        self.transferred_data = 0
        self.last_filename = None
        self.started = False
        self.arduino = serial.Serial(args.arduino, 38400, timeout=1)

    def send_status(self, state_id, transferred_file):
        """
        Send info to Arduino to update LCD
        """
        if self.args.arduino:
            if state_id == 1:
                state = "Rx   "
                progress = int((self.transferred_data / transferred_file.size)*100)
            else:
                state = "Wait "
            data_kb = int(self.total_data/1024)
            line1 = (state + str(self.files_total)+"F " + str(self.files_error)+"E")
            line2 = (str(data_kb) + "KB" + (" " + str(progress) + "%" if
                                            state_id == 1 else ""))
            self.arduino.write(bytes(line1+'\n', 'ascii'))
            self.arduino.write(bytes(line2+'\n', 'ascii'))

    def reset(self, success):
        """
        reset status variables
        """
        self.started = False
        self.transferred_data = 0
        self.files_total = self.files_total + 1
        if not success:
            self.files_error = self.files_error + 1
        self.arduino.write(bytes('               \n', 'ascii'))
        self.arduino.write(bytes('               \n', 'ascii'))

    def start_transmission(self, ser):
        """
        Start a transmission of a file
        """
        self.started = True
        transferred_file = FileTransfer()
        transferred_file.name_b64, filesize = ser.readline().strip().split(b" ")
        transferred_file.size = int(filesize)
        transferred_file.name = base64.b64decode(transferred_file.name_b64).decode('ascii')
        transferred_file.hasher.update(transferred_file.name_b64)
        self.logger.info("Receiving file %s", transferred_file.name)
        return transferred_file

    def end_transmission(self, transferred_file):
        """
        Transmission has ended, write file to disk
        """
        transferred_file.hashsum_received = (transferred_file.hasher.hexdigest()
                                             .encode("ascii", "ignore"))
        if transferred_file.hashsum_received == transferred_file.hashsum:
            filepath = os.path.join(self.args.directory, transferred_file.name)
            if os.path.dirname(filepath) and not os.path.exists(
                    os.path.dirname(filepath)):
                os.makedirs(os.path.dirname(filepath))
            self.logger.info("Hashsums match, writing to %s", filepath)
            resultfile = open(filepath, "wb")
            resultfile.write(transferred_file.content)
            resultfile.close()
            self.reset(True)
        else:
            self.logger.error("Hashsums do not match, failed to transfer %s", filepath)
            self.reset(False)
        self.send_status(0, transferred_file)
        self.last_filename = transferred_file.name

    def buffer_content(self, ser, transferred_file):
        """
        Receive content of file
        """
        self.logger.info("Buffering content.")
        self.send_status(1, transferred_file)
        transferred_file.content = b''
        while True:
            line = ser.readline().strip()
            if line == bytes(chr(3), 'ascii'): # ETX - End of Text:
                transferred_file.hashsum = ser.readline().strip()
                break
            else:
                transferred_file.hasher.update(line)
                try:
                    line_decoded = base64.b64decode(line)
                except base64.binascii.Error:
                    self.logger.error("Cannot decode Base64, aborting %s", transferred_file.name)
                    self.reset(False)
                    break
                transferred_file.content += line_decoded
                self.transferred_data = self.transferred_data + len(line_decoded)
                self.total_data = self.total_data + len(line_decoded)
                self.send_status(1, transferred_file)

    def transfer(self):
        """
        receive data
        """
        with serial.Serial(self.args.device, self.args.speed, timeout=1) as ser:
            time.sleep(3)
            transferred_file = None
            self.send_status(0, transferred_file)
            while True:
                line = ser.readline().strip().decode('ascii')
                if line == chr(1): # SOH - Start Of Header
                    transferred_file = self.start_transmission(ser)
                elif (self.started and line == chr(2)): # STX - Start of Text
                    self.buffer_content(ser, transferred_file)
                elif(self.started and line == chr(4)): # EOT - End of Transmission
                    self.end_transmission(transferred_file)
                    transferred_file = None
                elif line == chr(25):
                    assemble_chunks(self.args, self.last_filename)
                else:
                    self.send_status(0, transferred_file)
                    time.sleep(0.1)

DIODE = DiodeHandler(ARGS, DIODE_LOGGER)
DIODE.transfer()
